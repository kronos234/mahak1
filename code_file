//code to parse data values and store them in a csv file

import os
import time
from datetime import datetime
import csv
import re

path = "/home/mahak/Documents/stocks/intraQuarter"


def Key_Statsgather (gather= ["Total Debt/Equity",
                      'Trailing P/E',
                      'Price/Sales',
                      'Price/Book',
                      'Profit Margin',
                      'Operating Margin',
                      'Return on Assets',
                      'Return on Equity',
                      'Revenue Per Share',
                      'Market Cap',
                        'Enterprise Value',
                        'Forward P/E',
                        'PEG Ratio',
                        'Enterprise Value/Revenue',
                        'Enterprise Value/EBITDA',
                        'Revenue',
                        'Gross Profit',
                        'EBITDA',
                        'Net Income Avl to Common',
                        'Diluted EPS',
                        'Earnings Growth',
                        'Revenue Growth',
                        'Total Cash',
                        'Total Cash Per Share',
                        'Total Debt',
                        'Current Ratio',
                        'Book Value Per Share',
                        'Cash Flow',
                        'Beta',
                        'Held by Insiders',
                        'Held by Institutions',
                        'Shares Short (as of',
                        'Short Ratio',
                        'Short % of Float',
                        'Shares Short (prior ']):
    
    dict = {}
    i=1
    
    with open('key_stats_acc_perf_NO_NA.csv', 'w') as csvfile:
        fieldnames = ['Date',
                      'Unix',
                      'Ticker',
                      'stock_price',
                      'stock_p_change',
                      'SP500',
                      'sp500_p_change',
                      'Difference',
                      ##############
                      'DE Ratio',
                      'Trailing P/E',
                      'Price/Sales',
                      'Price/Book',
                      'Profit Margin',
                      'Operating Margin',
                      'Return on Assets',
                      'Return on Equity',
                      'Revenue Per Share',
                      'Market Cap',
                      'Enterprise Value',
                      'Forward P/E',
                      'PEG Ratio',
                      'Enterprise Value/Revenue',
                      'Enterprise Value/EBITDA',
                      'Revenue',
                      'Gross Profit',
                      'EBITDA',
                      'Net Income Avl to Common',
                      'Diluted EPS',
                      'Earnings Growth',
                      'Revenue Growth',
                      'Total Cash',
                      'Total Cash Per Share',
                      'Total Debt',
                      'Current Ratio',
                      'Book Value Per Share',
                      'Cash Flow',
                      'Beta',
                      'Held by Insiders',
                      'Held by Institutions',
                      'Shares Short (as of',
                      'Short Ratio',
                      'Short % of Float',
                      'Shares Short (prior ',                                
                      ##############
                      'Status']
        save = csv.DictWriter(csvfile, fieldnames=fieldnames)
        save.writeheader()    

        statspath = path+'/_KeyStats'
        stock_list = [x[0] for x in os.walk(statspath)]
        for each_dir in stock_list[1:]:
            each_file = os.listdir(each_dir)
            ticker = each_dir.split("/")[-1]
            
            dict[ticker.upper()]=int(i)
            i = i+1

        
            if len(each_file) > 0:
                for file in each_file:
                        
                    date_stamp = datetime.strptime(file,'%Y%m%d%H%M%S.html')                    
                    unix_time = time.mktime(date_stamp.timetuple())
                    full_file_path = each_dir+'/'+file                  
                        
                    source = open(full_file_path,'r').read()
                        
                    source.replace('\n','').replace('\t','')       
                    value_list = []
                    for each_data in gather:
                        try:
                            regex = re.escape(each_data) + r'.*?(\d{1,8}\.\d{1,8}M?B?|N/A)%?</td>'
                            value = re.search(regex,source)
                            value = value.group(1)
                                    
                            if "B" in value:
                                value = (float)(value.replace("B",''))*1000000000
                            elif "M" in value:
                                value = (float)(value.replace("M",''))*1000000
                                             
                            value_list.append(value)
                                        
                        except Exception as e:
                            value = "N/A"
                            value_list.append(value)
                            
                        
                     
                    date = str(datetime.fromtimestamp(unix_time).strftime('%Y-%m-%d'))
                    one_y_later_date =  str(datetime.fromtimestamp(unix_time+31536000).strftime('%Y-%m-%d'))
                    sp500_value = 0
                    sp500_1_y_value=0
                    stock_value=0
                    stock_1_y_value=0
                    # SP500 values 
                   
                    with open('YAHOO-INDEX_GSPC.csv') as f:
                        reader = csv.reader(f)   
                        
                        for row in reader:
                            if row[0] == date:
                                sp500_value = (float)(row[6])
                                break
                            elif row[0] < date:
                                sp500_value = (float)(row[6])
                                break
                    
                    #SP500 one year later values
                        
                        for row in reader:
                            if row[0] == one_y_later_date:
                                sp500_1_y_value = (float)(row[6])
                                break
                            elif row[0] < one_y_later_date:
                                sp500_1_y_value = (float)(row[6])
                                break
                        
                    # Stock values 
                    j=1
                    with open("Stock_prices.csv") as c:
                        reader = csv.reader(c)
                            
                        for row in reader:
                            try:
                                if row[0] == date:
                                    stock_value = (float)(row[int(dict[ticker.upper()])])
                                    break
                                elif row[0] > date:
                                    stock_value = (float)(row[int(dict[ticker.upper()])])
                                    break  
                            except:
                                stock_value='null'
                        
                    #one year later stock price  
                            
                        for row in reader:
                            
                            try:
                                if row[0] == one_y_later_date:
                                    stock_1_y_value = (float)(row[int(dict[ticker.upper()])])
                                    break
                                elif row[0] > one_y_later_date:
                                    stock_1_y_value = (float)(row[int(dict[ticker.upper()])])
                                    break
                            except:
                                stock_1_y_value = 'null'
                    
                    if stock_1_y_value=='null':
                        stock_1_y_value='N/A'
                    else:
                        stock_1_y_value = round( float(stock_1_y_value),2) 
                    if stock_value == 'null':
                        stock_value ='N/A'
                    else:
                        stock_value = round( float(stock_value),2) 
                    
                    sp500_1_y_value = round( float(sp500_1_y_value),2)
                    sp500_value = round( float(sp500_value),2)
                       
                    try:
                        
                        sp500_change =round(((sp500_1_y_value-sp500_value)/sp500_value)*100 ,2)       
                        stock_change =round((((stock_1_y_value-stock_value)/stock_value)*100),2)
                    except:
                        sp500_change = 'N/A'
                        stock_change = 'N/A'
                        
                    try:
                        difference = sp500_change - stock_change
                    except:
                        difference = 'N/A'
                            
                    if difference == 'N/A':
                        status = 'N/A'
                    elif difference >0:
                        status = 1
                    elif difference<=0 :
                        status = 0
                           
                    if value_list.count("N/A") > (0):
                        pass
                    else:
                    
                        save.writerow({'Date':date_stamp,
                                            'Unix':unix_time,
                                            'Ticker':ticker,
                                            'stock_price':stock_value,
                                            'stock_p_change':stock_change,
                                            'SP500':sp500_value,
                                            'sp500_p_change':sp500_change,
                                            'Difference':difference,
                                            'DE Ratio':value_list[0],
                                            #'Market Cap':value_list[1],
                                            'Trailing P/E':value_list[1],
                                            'Price/Sales':value_list[2],
                                            'Price/Book':value_list[3],
                                            'Profit Margin':value_list[4],
                                            'Operating Margin':value_list[5],
                                            'Return on Assets':value_list[6],
                                            'Return on Equity':value_list[7],
                                            'Revenue Per Share':value_list[8],
                                            'Market Cap':value_list[9],
                                             'Enterprise Value':value_list[10],
                                             'Forward P/E':value_list[11],
                                             'PEG Ratio':value_list[12],
                                             'Enterprise Value/Revenue':value_list[13],
                                             'Enterprise Value/EBITDA':value_list[14],
                                             'Revenue':value_list[15],
                                             'Gross Profit':value_list[16],
                                             'EBITDA':value_list[17],
                                             'Net Income Avl to Common':value_list[18],
                                             'Diluted EPS':value_list[19],
                                             'Earnings Growth':value_list[20],
                                             'Revenue Growth':value_list[21],
                                             'Total Cash':value_list[22],
                                             'Total Cash Per Share':value_list[23],
                                             'Total Debt':value_list[24],
                                             'Current Ratio':value_list[25],
                                             'Book Value Per Share':value_list[26],
                                             'Cash Flow':value_list[27],
                                             'Beta':value_list[28],
                                             'Held by Insiders':value_list[29],
                                             'Held by Institutions':value_list[30],
                                             'Shares Short (as of':value_list[31],
                                             'Short Ratio':value_list[32],
                                             'Short % of Float':value_list[33],
                                             'Shares Short (prior ':value_list[34],
                                            'Status':status
                                   })
    print('done')

                

Key_Statsgather()

// code to train and analyse it

import numpy as np
from sklearn import svm, preprocessing
from matplotlib import style
import pandas as pd
import statistics


style.use('ggplot')

def Build_dataset(FEATURES = ['DE Ratio',
                              'Trailing P/E', 
                              'Price/Sales', 
                              'Price/Book', 
                              'Profit Margin', 
                              'Operating Margin', 
                              'Return on Assets', 
                              'Return on Equity', 
                              'Revenue Per Share', 
                              'Market Cap', 
                              'Enterprise Value', 
                              'Forward P/E', 
                              'PEG Ratio', 
                              'Enterprise Value/Revenue', 
                              'Enterprise Value/EBITDA', 
                              'Revenue', 'Gross Profit', 
                              'EBITDA', 'Net Income Avl to Common', 
                              'Diluted EPS', 'Earnings Growth', 
                              'Revenue Growth', 'Total Cash', 
                              'Total Cash Per Share', 'Total Debt', 
                              'Current Ratio', 'Book Value Per Share', 
                              'Cash Flow', 'Beta', 'Held by Insiders', 
                              'Held by Institutions', 
                              'Shares Short (as of', 'Short Ratio', 
                              'Short % of Float', 'Shares Short (prior ']):
    
    #with open('noNA.csv') as f:
        #reader = csv.reader(f)ma
    data_df = pd.DataFrame.from_csv('key_stats_acc_perf_NO_NA.csv')
    #data_df = data_df[:100]
    #df2 <- df1[sample(nrow(df1)),]
    data_df = data_df.iloc[np.random.permutation(len(data_df))]
    data_df = data_df.reset_index(drop=True)
    #data_df = data_df.reindex(np.random.permutation(data_df.index))
        
    
    
    data_df = data_df.replace('NaN',0).replace('N/A',0)
    X = np.array(data_df[FEATURES].values)
    y = np.array(data_df['Status'].values)
    X = preprocessing.scale(X)
    Z = np.array(data_df[['stock_p_change','sp500_p_change']])   
        
    return X,y,Z
    
def Analysis():
    test_size = 1000
    invest_amount = 10000
    total_invest = 0
    if_market = 0
    if_strat = 0
    
    X,y,Z = Build_dataset()
    print(len(X))
    clf = svm.SVC(kernel='linear',C = 0.1)
    print("fit karra")
    clf.fit(X[:-test_size],y[:-test_size])
    print("Fit hogaya")
    correct_count = 0;
    for x in range(1,test_size+1):
        if clf.predict(X[-x])[0] == y[-x]:
            correct_count += 1
        if clf.predict(X[-x])[0] == 1:
            invest_return = invest_amount+(invest_amount*(Z[-x][0]/100))
            market_return = invest_amount+(invest_amount*(Z[-x][1]/100))
            total_invest +=1
            if_market += market_return
            if_strat += invest_return
            
    print("Accuracy: ",(correct_count/test_size)*100.0) 
    print("Total investments :",total_invest)
    print("Ending with strategy :",if_strat)
    print("Ending witharketm :",if_market)
    
    compare = ((if_strat-if_market)/if_market)*100
    
    print("Compared to market we earn ",str(compare)+"%more")

    
    
    
Analysis()
        
